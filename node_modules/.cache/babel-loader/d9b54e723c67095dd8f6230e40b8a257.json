{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]); //each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrent, setIsCorrect] = useState(false);\n\n  const formatQuess = () => {\n    console.log('Formatting the guess ---' + currentGuess);\n  };\n\n  const addNewQuess = () => {};\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === 'Enter') {\n      //only add guess if turn is less than five\n      if (turn > 5) {\n        console.log('You used all your guesses');\n        return;\n      } //do not allow dublicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log('You already tried that word');\n        return;\n      } //The word has to be fice chars long\n\n\n      if (currentGuess.length !== 5) {\n        console.log('Word must be 5 chars long');\n        return;\n      }\n\n      formatQuess();\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrent,\n    handleKeyUp\n  };\n};\n\n_s(useWordle, \"6dw/klRzDMgw6jl4jh6BwGMc9pA=\");\n\nexport default useWordle;","map":{"version":3,"sources":["C:/Code/React-Wordle/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrent","setIsCorrect","formatQuess","console","log","addNewQuess","handleKeyUp","key","includes","length","prev","slice","test"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAH8B,CAGc;;AAC5C,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CAJ8B,CAIc;;AAC5C,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BV,YAAzC;AACD,GAFD;;AAIA,QAAMW,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEA,QAAMC,WAAW,GAAG,QAAa;AAAA,QAAZ;AAAEC,MAAAA;AAAF,KAAY;;AAC/B,QAAGA,GAAG,KAAK,OAAX,EAAmB;AACf;AACA,UAAGf,IAAI,GAAG,CAAV,EAAY;AACRW,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH,OALc,CAMf;;;AACA,UAAGN,OAAO,CAACU,QAAR,CAAiBd,YAAjB,CAAH,EAAkC;AAC9BS,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACH,OAVc,CAWf;;;AACA,UAAGV,YAAY,CAACe,MAAb,KAAwB,CAA3B,EAA6B;AACzBN,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH;;AACDF,MAAAA,WAAW;AAEd;;AACD,QAAIK,GAAG,KAAK,WAAZ,EAAyB;AACvBZ,MAAAA,eAAe,CAAEe,IAAD,IAAU;AACxB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD,OAFc,CAAf;AAGA;AACD;;AACD,QAAI,aAAaC,IAAb,CAAkBL,GAAlB,CAAJ,EAA4B;AAC1B,UAAIb,YAAY,CAACe,MAAb,GAAsB,CAA1B,EAA6B;AAC3Bd,QAAAA,eAAe,CAAEe,IAAD,IAAU;AACxB,iBAAOA,IAAI,GAAGH,GAAd;AACD,SAFc,CAAf;AAGD;AACF;AACF,GAjCD;;AAmCA,SAAO;AAAEf,IAAAA,IAAF;AAAQE,IAAAA,YAAR;AAAsBE,IAAAA,OAAtB;AAA+BI,IAAAA,SAA/B;AAA0CM,IAAAA;AAA1C,GAAP;AACD,CAjDD;;GAAMhB,S;;AAkDN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useWordle = (solution) => {\r\n  const [turn, setTurn] = useState(0);\r\n  const [currentGuess, setCurrentGuess] = useState(\"\");\r\n  const [guesses, setGuesses] = useState([]); //each guess is an array\r\n  const [history, setHistory] = useState([]); // each guess is a string\r\n  const [isCorrent, setIsCorrect] = useState(false);\r\n\r\n  const formatQuess = () => {\r\n    console.log('Formatting the guess ---' + currentGuess);\r\n  };\r\n\r\n  const addNewQuess = () => {};\r\n\r\n  const handleKeyUp = ({ key }) => {\r\n    if(key === 'Enter'){\r\n        //only add guess if turn is less than five\r\n        if(turn > 5){\r\n            console.log('You used all your guesses');\r\n            return\r\n        }\r\n        //do not allow dublicate words\r\n        if(history.includes(currentGuess)){\r\n            console.log('You already tried that word');\r\n            return\r\n        }\r\n        //The word has to be fice chars long\r\n        if(currentGuess.length !== 5){\r\n            console.log('Word must be 5 chars long');\r\n            return\r\n        }\r\n        formatQuess()\r\n\r\n    }\r\n    if (key === \"Backspace\") {\r\n      setCurrentGuess((prev) => {\r\n        return prev.slice(0, -1);\r\n      });\r\n      return;\r\n    }\r\n    if (/^[A-Za-z]$/.test(key)) {\r\n      if (currentGuess.length < 5) {\r\n        setCurrentGuess((prev) => {\r\n          return prev + key;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return { turn, currentGuess, guesses, isCorrent, handleKeyUp };\r\n};\r\nexport default useWordle;\r\n"]},"metadata":{},"sourceType":"module"}