{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\React-Wordle\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [solution, setSolution] = useState(null);\n  useEffect(() => {\n    fetch(\"http://localhost:3001/solutions\").then(res => res.json()).then(json => {\n      // random between 0 to 3\n      const randomSolution = json[Math.floor(Math.random() * json.length)];\n      console.log(randomSolution);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle (Lingo)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"TWlLMDOrQRrjrZYBibtoISDiqTs=\");\n\n_c = App;\nexport default App;\n/* \r\n\r\ndata we need to track:\r\n  -- solution\r\n    -- 5 letter string, e.g. 'drain'\r\n  -- past guesses\r\n    -- an array of past guesses\r\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\r\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\r\n  -- current guess\r\n    -- string 'hello'\r\n  -- keypad letters\r\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\r\n  -- number of turns\r\n    -- an integer 0 - 6\r\n\r\ngame process:\r\n  -- entering words:\r\n    -- user enters a letter & a square is filled with that letter\r\n    -- when a user hits delete it deletes the previous letter\r\n    -- when a user hits enter it submits the word\r\n      -- if all squares are not filled with letters then the word is not submitted\r\n      -- if that word has already been used in a prev guess then the word is not submitted\r\n  -- checking submitted words:\r\n    -- each letter is checked to see if it matches to the solution\r\n    -- each letter is assigned a color based on it's inclusion in the solution\r\n      -- exact matches (correct position in the solution) are green\r\n      -- partial matches (in the solution but not the correct position) are yellow\r\n      -- none-matches (not in the solution at all) are grey\r\n    -- the guess is added the grid with the correct colors\r\n    -- the current guess moves to the next row\r\n    -- the keypad letters are updated (colors)\r\n  -- ending the game:\r\n    -- when the guessed word fully matches the solution\r\n      -- modal to say 'well done'\r\n    -- when the user runs out of guesses\r\n      -- modal to say 'unlucky'\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Code/React-Wordle/src/App.js"],"names":["useEffect","useState","App","solution","setSolution","fetch","then","res","json","randomSolution","Math","floor","random","length","console","log"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,KAAK,CAAC,iCAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AAEd;AAEA,YAAMC,cAAc,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcJ,IAAI,CAACK,MAA9B,CAAD,CAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,cAAZ;AACD,KARH;AASD,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GApBQP,G;;KAAAA,G;AAsBT,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [solution, setSolution] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:3001/solutions\")\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n       \r\n        // random between 0 to 3\r\n        \r\n        const randomSolution = json[Math.floor(Math.random()*json.length)]\r\n        console.log(randomSolution);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Wordle (Lingo)</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/* \r\n\r\ndata we need to track:\r\n  -- solution\r\n    -- 5 letter string, e.g. 'drain'\r\n  -- past guesses\r\n    -- an array of past guesses\r\n    -- each past guess is an array of letter objects [{}, {}, {}, {}, {}]\r\n    -- each object represents a letter in the guess word {letter: 'a', color: 'yellow'}\r\n  -- current guess\r\n    -- string 'hello'\r\n  -- keypad letters\r\n    -- array of letter objects [{key: 'a', color: 'green'}, {}, {} ...]\r\n  -- number of turns\r\n    -- an integer 0 - 6\r\n\r\ngame process:\r\n  -- entering words:\r\n    -- user enters a letter & a square is filled with that letter\r\n    -- when a user hits delete it deletes the previous letter\r\n    -- when a user hits enter it submits the word\r\n      -- if all squares are not filled with letters then the word is not submitted\r\n      -- if that word has already been used in a prev guess then the word is not submitted\r\n  -- checking submitted words:\r\n    -- each letter is checked to see if it matches to the solution\r\n    -- each letter is assigned a color based on it's inclusion in the solution\r\n      -- exact matches (correct position in the solution) are green\r\n      -- partial matches (in the solution but not the correct position) are yellow\r\n      -- none-matches (not in the solution at all) are grey\r\n    -- the guess is added the grid with the correct colors\r\n    -- the current guess moves to the next row\r\n    -- the keypad letters are updated (colors)\r\n  -- ending the game:\r\n    -- when the guessed word fully matches the solution\r\n      -- modal to say 'well done'\r\n    -- when the user runs out of guesses\r\n      -- modal to say 'unlucky'\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}